var documenterSearchIndex = {"docs":
[{"location":"#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"RandomTree.jl is a Julia package for simulations on random trees, in particular Conditional Galton-Watson trees. It can efficiently generate several types of random trees up to size 10^8, including","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Conditional Galton Watson tree\nCayley\nBinary\nCatalan\nDAry\nMotzkin\nRandom Recursive Trees (up to size 10^7)","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"as well as carry out these simulations","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"k-cut\nsum of log(subtree sizes) over all fringe subtrees\nheight\ntotal path length\nleaf number count","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"The package also provides a simply function for drawing trees.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"You can use RandomTree.jl as a library in your code, in Julia REPL, or in a Jupyter notebook. It can also run as a standalone script.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"The generation of conditional Galton-Watson trees uses a very efficient algorithm introduced by Luc Devroye. Generating a Galton-Watson tree of 1 million nodes takes about 20-30 ms.","category":"page"},{"location":"install/#Installation-1","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/#","page":"Installation","title":"Installation","text":"Start Julia REPL and enter the package mode by pressing ]. You should see the prompt","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"(v1.1) pkg>","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"Type","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"(v1.1) pkg> dev https://github.com/newptcai/RandomTree.jl","category":"page"},{"location":"install/#","page":"Installation","title":"Installation","text":"should add RandomTree.jl to your default Julia environment. Then you can just use it as any other Julia package. You can also find the source code of the package at ~/.julia/dev/RandomTree.","category":"page"},{"location":"usage/#Usage-1","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Use-RandomTree.jl-In-interactive-environment-1","page":"Usage","title":"Use RandomTree.jl In interactive environment","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"In Julia REPL, load RandomTree.jl by","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"julia> using RandomTree","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"To get the degree sequence of a Cayley tree of size 5 in depth-search-first order, type","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"julia> tree = CayleyTree(5)\nCayley Tree of size 5\n\njulia> degrees(tree)\n5-element Array{Int32,1}:\n 3\n 1\n 0\n 0\n 0","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Note that since we are simulating a random tree, each time degrees(tree) is called, a random degree sequence is returned.","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"Simulations on random trees usually need to compute a property of trees from its degree sequence. Several such simulations has been implemented in src/simulator.jl. For example, to generate 1000 Cayley Trees and calculate their height, type","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"julia> sim = HeightSimulator(tree)\nheight simulation of Cayley Tree of size 5\n\njulia> sim_result = simulation(sim, 1000)\n1000-element Array{Any,1}:\n 4\n 3\n 4\n 5\n 4\n 3\n 4\n 4\n 3\n 3\n â‹®\n 4\n 3\n 4\n 4\n 4\n 3\n 5\n 4\n 4","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"See example.ipynb in the notebook directory for more demonstrations.","category":"page"},{"location":"usage/#Use-RandomTree.jl-as-a-script-1","page":"Usage","title":"Use RandomTree.jl as a script","text":"","category":"section"},{"location":"usage/#","page":"Usage","title":"Usage","text":"In a terminal, change folder to the ~/.julia/dev/RandomTree/src and run the command","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"julia simtree.jl -l 5 -n 10000 -t Cayley height","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"will generate 10000 Cayley trees of size 10^5 and print out their heights. Run","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"julia simtree.jl --help","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"to see the other options.","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"The simulations can made parallel. For example","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"julia -p 4 simtree.jl -l 5 -n 10000 -t Cayley height","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"will start 4 local processes on your local machine to run the simulation. You can also run simulations across several nodes of a cluster by using","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"julia --machine-file machines.txt simtree.jl -l 5 -n 10000 -t Cayley height","category":"page"},{"location":"usage/#","page":"Usage","title":"Usage","text":"where machines.txt contains the information for finding remote nodes. See Julia's documentats for details.","category":"page"},{"location":"api/#API-reference-1","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/#","page":"API reference","title":"API reference","text":"Modules = [RandomTree]\nOrder   = [:type, :function]","category":"page"},{"location":"api/#RandomTree.AbstractSimulator","page":"API reference","title":"RandomTree.AbstractSimulator","text":"Simulator on random/fixed trees\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.AbstractTree","page":"API reference","title":"RandomTree.AbstractTree","text":"Type of all trees represented by DFS degree sequences\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.BinaryTree","page":"API reference","title":"RandomTree.BinaryTree","text":"A conditional Galton-Watson tree with 2 Bernoulli(1/2) offspring distrbiution.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.BinaryTree-Tuple{Int64}","page":"API reference","title":"RandomTree.BinaryTree","text":"BinaryTree(size::Int)\n\nConstruct a BinaryTree of size size.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.CayleyTree","page":"API reference","title":"RandomTree.CayleyTree","text":"A conditional Galton-Watson tree with Poission(1) offspring distrbiution.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.CayleyTree-Tuple{Int64}","page":"API reference","title":"RandomTree.CayleyTree","text":"CayleyTree(size::Int)\n\nConstruct a CayleyTree of size size.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.CondGWTree","page":"API reference","title":"RandomTree.CondGWTree","text":"Type of conditional Galton-Watson trees represented by DFS degree sequences\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.DFSWalker","page":"API reference","title":"RandomTree.DFSWalker","text":"A DFSWalker does DFS walk on a tree to compute some property of the tree.  It should implement at least one of the two functions.\n\nvisitfirst(walker::AbstractTreeWalker, degree_sequence, node_index, parent_index)\nvisitsecond(walker::AbstractTreeWalker, degree_sequence, node_index, parent_index)\n\nThe first is called when the DFS walk first enters a node. The second is call when the walk finally leaves the node.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.DepthWalker","page":"API reference","title":"RandomTree.DepthWalker","text":"A walker computes the depths of all nodes in a tree.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.FiniteTree","page":"API reference","title":"RandomTree.FiniteTree","text":"Type of fintie trees represented by DFS degree sequences\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.FirstOnlyDFSWalker","page":"API reference","title":"RandomTree.FirstOnlyDFSWalker","text":"A DFS walker that only needed to be called when the walk enters a node.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.FixedDirectedGraph","page":"API reference","title":"RandomTree.FixedDirectedGraph","text":"Representing a fixed directed graph with directed edges stored in an array\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.FixedGraph","page":"API reference","title":"RandomTree.FixedGraph","text":"Representing a fixed graph with edges stored in an array\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.FixedTreeGraph","page":"API reference","title":"RandomTree.FixedTreeGraph","text":"Representing a fixed tree with directed edges stored in an array\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.FixedTreeGraph-Tuple{Int64,Array{Tuple{Int64,Int64},N} where N}","page":"API reference","title":"RandomTree.FixedTreeGraph","text":"FixedTreeGraph(size::Int, edges::Array{Tuple{Int, Int}})\n\nConstruct a FixedTreeGraph with edges edges of size size.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.FixedTreeGraph-Tuple{Int64}","page":"API reference","title":"RandomTree.FixedTreeGraph","text":"FixedTreeGraph(size::Int)\n\nConstruct a FixedTreeGraph with no edges of size.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.FullDAryTree","page":"API reference","title":"RandomTree.FullDAryTree","text":"A fixed full-d-ary tree, i.e., in a tree each node has either d or 0 children and each level is full.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.FullDAryTree-Tuple{Int64,Int64}","page":"API reference","title":"RandomTree.FullDAryTree","text":"FullDAryTree(height::Int, d::Int)\n\nConstruct a FullDAryTree of height height and maximum degree d.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.GeneralCondGWTree","page":"API reference","title":"RandomTree.GeneralCondGWTree","text":"A conditional Galton-Watson tree.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.GeneralCondGWTree-Tuple{Int64,Distributions.Distribution{Distributions.Univariate,Distributions.Discrete}}","page":"API reference","title":"RandomTree.GeneralCondGWTree","text":"GeneralCondGWTree(size::Int, maxdegree::Int, dist::DiscreteUnivariateDistribution)\n\nConstruct a GeneralCondGWTree of size size, maximum degree maxdegree, and offspring distribution dist.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.GeneralCondGWTree-Tuple{Int64,Int64,Distributions.Distribution{Distributions.Univariate,Distributions.Discrete}}","page":"API reference","title":"RandomTree.GeneralCondGWTree","text":"GeneralCondGWTree(size::Int, maxdegree::Int, dist::DiscreteUnivariateDistribution)\n\nConstruct a GeneralCondGWTree of size size and offspring distribution dist.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.GraphWalker","page":"API reference","title":"RandomTree.GraphWalker","text":"A walker that converts a tree represented in DFS degree sequence to a FixedTreeGraph.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.HeightSimulator","page":"API reference","title":"RandomTree.HeightSimulator","text":"Simulation of height of trees.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.KcutSimulator","page":"API reference","title":"RandomTree.KcutSimulator","text":"Simulation of the k-cut number of trees.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.KcutWalker","page":"API reference","title":"RandomTree.KcutWalker","text":"A walker computes the (random) k-cut number of a tree.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.KcutWalker-Tuple{Integer}","page":"API reference","title":"RandomTree.KcutWalker","text":"KcutWalker(k::Integer)\n\nConstruct a KcutWalker to compute the k-cut number of a tree.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.LeafSimulator","page":"API reference","title":"RandomTree.LeafSimulator","text":"Simulation of the number of leafs.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.RandomRecursiveTree","page":"API reference","title":"RandomTree.RandomRecursiveTree","text":"A random recursive tree.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.RandomRecursiveTree-Tuple{Int64}","page":"API reference","title":"RandomTree.RandomRecursiveTree","text":"RandomRecursiveTree(size::Int)\n\nConstruct a RandomRecursiveTree of size size.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.SubtreeSizeWalker","page":"API reference","title":"RandomTree.SubtreeSizeWalker","text":"A walker computes the size of all subtrees of a tree.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.TotalPathSimulator","page":"API reference","title":"RandomTree.TotalPathSimulator","text":"Simulation of the total path length of trees.\n\n\n\n\n\n","category":"type"},{"location":"api/#Base.size-Tuple{FiniteTree}","page":"API reference","title":"Base.size","text":"size(t::FiniteTree)\n\nReturn the size of the tree t\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.size-Tuple{FixedGraph}","page":"API reference","title":"Base.size","text":"size(graph::FixedGraph)\n\nReturn the size of the graph graph\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.CatalanTree-Tuple{Int64}","page":"API reference","title":"RandomTree.CatalanTree","text":"CatalanTree(size::Int)\n\nConstruct a GeneralCondGWTree with Geometric(1/2) offspring distribution of size size.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.DAryTree-Tuple{Int64,Int64}","page":"API reference","title":"RandomTree.DAryTree","text":"DAryTree(size::Int, d::Int)\n\nConstruct a GeneralCondGWTree with Binomial(d, 1/d) offspring distribution of size size.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.LogProductSimulator-Tuple{Any}","page":"API reference","title":"RandomTree.LogProductSimulator","text":"LogProductSimulator(tree)\n\nConstruct a SubtreeSizeSimulator that simulate the sum of log(subtree size) of trees.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.LogProductSimulator-Tuple{FiniteTree,Int64}","page":"API reference","title":"RandomTree.LogProductSimulator","text":"LogProductSimulator(tree, power)\n\nConstruct a SubtreeSizeSimulator that simulate the sum of log(subtree size)^power of trees.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.MotzkinTree-Tuple{Int64}","page":"API reference","title":"RandomTree.MotzkinTree","text":"MotzkinTree(size::Int)\n\nConstruct a GeneralCondGWTree with DiscreteUniform(0, 2) offspring distribution of size size.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.SizePowerSimulator-Tuple{Any}","page":"API reference","title":"RandomTree.SizePowerSimulator","text":"SizePowerSimulator(tree)\n\nConstruct a SubtreeSizeSimulator that simulate the sum of sqrt(subtree size) of trees.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.SizePowerSimulator-Tuple{FiniteTree,Any}","page":"API reference","title":"RandomTree.SizePowerSimulator","text":"SizePowerSimulator(tree, power)\n\nConstruct a SubtreeSizeSimulator that simulate the sum of (subtree size)^power of trees.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.addedge!-Tuple{FixedGraph,Any,Any}","page":"API reference","title":"RandomTree.addedge!","text":"addedge!(tree::FixedGraph, from, to)\n\nAdd an edge  (from, to) in tree.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.degrees","page":"API reference","title":"RandomTree.degrees","text":"degrees(tree)\n\nReturn an iterator that traverses the degree sequence of tree in DFS order.\n\n\n\n\n\n","category":"function"},{"location":"api/#RandomTree.drawtree","page":"API reference","title":"RandomTree.drawtree","text":"Draw a grpahic representaion of a tree using graphivz and its Python Interface\n\n\n\n\n\n","category":"function"},{"location":"api/#RandomTree.drawtree","page":"API reference","title":"RandomTree.drawtree","text":"drawtree(tree_digraph::FixedGraph, show_label=false)\n\nDraw a graphic representation of tree_digraph\n\n\n\n\n\n","category":"function"},{"location":"api/#RandomTree.drawtree","page":"API reference","title":"RandomTree.drawtree","text":"drawtree(tree::FiniteTree, show_label=false)\n\nDraw a graphic representation of the random/fixed tree tree.\n\n\n\n\n\n","category":"function"},{"location":"api/#RandomTree.drawtree","page":"API reference","title":"RandomTree.drawtree","text":"drawtree(deg_seq::Vector{Int}, show_label=false)\n\nDraw a graphic representation of tree with DFS degree sequence deg_seq\n\n\n\n\n\n","category":"function"},{"location":"api/#RandomTree.edges-Tuple{FixedGraph}","page":"API reference","title":"RandomTree.edges","text":"Return the array of edges of the graph\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.main-Tuple{}","page":"API reference","title":"RandomTree.main","text":"Entry point of command line script\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.maxdegree-Tuple{FiniteTree}","page":"API reference","title":"RandomTree.maxdegree","text":"maxdegree(t::FiniteTree)\n\nReturn the maximum degree of the tree t\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.name-Tuple{FiniteTree}","page":"API reference","title":"RandomTree.name","text":"name(t::FiniteTree)\n\nReturn the name of the tree t\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.nodes-Tuple{FixedGraph}","page":"API reference","title":"RandomTree.nodes","text":"Return the nodes of the graph as an iterator\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.positions-Tuple{FixedTreeGraph}","page":"API reference","title":"RandomTree.positions","text":"positions(tree::FixedTreeGraph)::Array{Int, 2}\n\nFirst sort the edges in the tree and then return an array containing the position and length of the segment in the edge array corresponding to each node.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.print_simulation-Tuple{AbstractSimulator,Any}","page":"API reference","title":"RandomTree.print_simulation","text":"print_simulation(sim::AbstractSimulator, nsample)\n\nPrint nsample samples in simulation sim.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.result-Tuple{AbstractTreeWalker}","page":"API reference","title":"RandomTree.result","text":"result(walker::AbstractTreeWalker)\n\nReturn of the result of the walk on the tree.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.simulation-Tuple{AbstractSimulator,Any}","page":"API reference","title":"RandomTree.simulation","text":"simulation(sim::AbstractSimulator, nsample)\n\nReturn nsample samples in simulation sim.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.simulation-Tuple{RandomTree.SubtreeSizeSimulator}","page":"API reference","title":"RandomTree.simulation","text":"simulation(sim::SubtreeSizeSimulator)\n\nReturn one sample in simulation sim.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.sortedge!-Tuple{FixedTreeGraph}","page":"API reference","title":"RandomTree.sortedge!","text":"sortedge!(tree::FixedTreeGraph)\n\nSort the edges in tree according to starting nodes.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.treegraph","page":"API reference","title":"RandomTree.treegraph","text":"treegraph(tree)::FixedTreeGraph\n\nEither convert a fixed tree to a FixedTreeGraph, or generate a random FixedTreeGraph according to tree.\n\n\n\n\n\n","category":"function"},{"location":"api/#RandomTree.walk-Tuple{FiniteTree,DFSWalker}","page":"API reference","title":"RandomTree.walk","text":"walk(tree::FiniteTree, walker::DFSWalker)\n\nMake walker do a DFS walk on tree.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.FiniteFixedTree","page":"API reference","title":"RandomTree.FiniteFixedTree","text":"Type of fintie fixed trees represented by DFS degree sequences\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.FiniteRandomTree","page":"API reference","title":"RandomTree.FiniteRandomTree","text":"Type of fintie random trees represented by DFS degree sequences\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.SubtreeSizeSimulator","page":"API reference","title":"RandomTree.SubtreeSizeSimulator","text":"Simulation of the additive function in the form of sum of func(subtree size) applied to random trees.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.TreeSpec","page":"API reference","title":"RandomTree.TreeSpec","text":"The specification of a tree.\n\n\n\n\n\n","category":"type"},{"location":"api/#RandomTree.TreeSpec-Tuple{Int64,String}","page":"API reference","title":"RandomTree.TreeSpec","text":"TreeSpec(size::Int, name::String)\n\nConstruct a TreeSpec of size size and name name.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.parse_commandline-Tuple{}","page":"API reference","title":"RandomTree.parse_commandline","text":"Parse command line arguments\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.visitfirst-Tuple{AbstractTreeWalker,Any,Any,Any}","page":"API reference","title":"RandomTree.visitfirst","text":"visitfirst(walker::AbstractTreeWalker, degree_sequence, node_index, parent_index)\n\nThe function is called when the walker first enters a node.\n\n\n\n\n\n","category":"method"},{"location":"api/#RandomTree.visitsecond-Tuple{AbstractTreeWalker,Any,Any,Any}","page":"API reference","title":"RandomTree.visitsecond","text":"visitsecond(walker::AbstractTreeWalker, degree_sequence, node_index, parent_index)\n\nThe function is called when the walker finally leaves a node.\n\n\n\n\n\n","category":"method"},{"location":"plan/#Future-plan-1","page":"Future Plan","title":"Future plan","text":"","category":"section"},{"location":"plan/#","page":"Future Plan","title":"Future Plan","text":"Several random trees will be added in the future","category":"page"},{"location":"plan/#","page":"Future Plan","title":"Future Plan","text":"[ ] binary search trees\n[ ] split trees in general\n[ ] preferential attachment","category":"page"}]
}
